                     Consultas bÃ¡sicas com SELECT na prÃ¡tica


Retornando empregado
SELECT * FROM EMPREGADO;

Retornando colunas especÃƒÂ­ficas
SELECT ID, PRIM_NOME, ULT_NOME  FROM EMPREGADO;

Retornando salÃƒÂ¡rio anual
SELECT ID, PRIM_NOME,SALARIO, SALARIO * 40 /3  FROM EMPREGADO;

Retornando o nome completo do empregado
SELECT PRIM_NOME ||ULT_NOME  FROM EMPREGADO

SELECT PRIM_NOME ||' '||ULT_NOME  FROM EMPREGADO

Criando alias
SELECT PRIM_NOME|| ' ' ||ULT_NOME  AS "NOME COMPLETO"
FROM EMPREGADO

SELECT PRIM_NOME|| ' ' ||ULT_NOME   NOME_COMPLETO
FROM EMPREGADO

SELECT SEM FROM

SELECT 'ALO', 9 + 5, NOW()

SELECT 'ALO', 9 + 5, NOW()
FROM EMPREGADO

FunÃƒÂ§ÃƒÂµes de grupo

SELECT AVG(SALARIO), SUM(SALARIO), MAX(SALARIO), MIN(SALARIO), COUNT(*)
FROM EMPREGADO

SELECT MAX(SALARIO), MIN(SALARIO), 
       MAX(ULT_NOME), MIN(ULT_NOME),
	 MAX(DT_ADMISSAO), MIN(DT_ADMISSAO)
FROM EMPREGADO



Organizar bem o cÃ³digo Ã© essencial para criar aplicaÃ§Ãµes escalÃ¡veis com Node.js e Express. Por isso, gosto de seguir a arquitetura MVC â€“ uma forma clara de separar responsabilidades e manter tudo limpo e compreensÃ­vel.

ðŸ”§ MVC = Model - View - Controller

Aqui estÃ¡ uma estrutura de pastas que costumo usar em projetos Express.js:

/project-root
â”‚
â”œâ”€â”€ /controllers â†’ LÃ³gica de negÃ³cio
â”œâ”€â”€ /models â†’ Schemas e operaÃ§Ãµes com o banco de dados
â”œâ”€â”€ /routes â†’ DefiniÃ§Ã£o das rotas
â”œâ”€â”€ /middlewares â†’ FunÃ§Ãµes de middleware personalizadas
â”œâ”€â”€ /config â†’ ConfiguraÃ§Ãµes do app ou do banco
â”œâ”€â”€ /public â†’ Arquivos estÃ¡ticos (CSS, JS, imagens)
â”œâ”€â”€ .env â†’ VariÃ¡veis de ambiente
â”œâ”€â”€ .gitignore â†’ ExclusÃµes do Git (como node_modules, .env)
â”œâ”€â”€ node_modules/ â†’ Pacotes instalados
â”œâ”€â”€ package.json â†’ Metadados e scripts do app
â”œâ”€â”€ app.js â†’ Ponto de entrada da aplicaÃ§Ã£o